/**
 * Problem: Remove duplicates from a sorted Linked List: Given a sorted linked list, delete all duplicates such that each element appear only once.
 */

const removeDuplicates = (linkedList) => {
  let current = linkedList.head;

  while (current.next) {
    if (current.value === current.next.value) {
      current.next = current.next.next;
    } else {
      current = current.next;
    }
  }
};


// Driver Code - Do not modify
class Node {
  constructor(value) {
    this.value = value;
    this.next = null;
  }
}

class LinkedList {
  constructor(value) {
    this.head = new Node(value);
  }
  insert(value) {
    let current = this.head;
    while (current.next) {
      current = current.next;
    }
    current.next = new Node(value);
  }
  print() {
    let current = this.head;
    while (current) {
      process.stdout.write(current.value +  "->");
      current = current.next;
    }
  }
}

const linkedList = new LinkedList(1);
linkedList.insert(1);
linkedList.insert(1);
linkedList.insert(3);
linkedList.insert(4);
linkedList.insert(4);
linkedList.insert(4);
linkedList.insert(5);
linkedList.insert(6);
linkedList.insert(6);

removeDuplicates(linkedList);
linkedList.print();
